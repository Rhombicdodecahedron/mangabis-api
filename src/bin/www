#!/usr/bin/env node

const http = require('http');
const app = require('../app');

const {logger} = require('../middleware/logger');

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (Number.isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Get port from environment and store in Koa.
const PORT = normalizePort(process.env.PORT || 6673);
// Create the HTTP server
const SERVER = http.createServer(app.callback());

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof PORT === 'string' ? `Pipe ${PORT}` : `Port ${PORT}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const address = SERVER.address();
    const bind = typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`;
    logger.info(`Listening on ${bind}`);
}

// Listen on provided port, on all network interfaces.
SERVER.listen(PORT);
SERVER.on('error', onError);
SERVER.on('listening', onListening);
